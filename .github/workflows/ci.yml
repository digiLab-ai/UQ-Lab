---
name: Continuous Integration

on: [push, pull_request]

jobs:
    ubuntu-tests:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os:
                    - ubuntu-latest
                python-version:
                    - 3.9
            fail-fast: false

        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 2

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v1
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Update pip
              run: |
                  python -m ensurepip
                  python -m pip install --upgrade pip

            - name: Configure poetry
              run: |
                  python -m pip install poetry
                  python -m poetry config virtualenvs.in-project true
                  python -m poetry config virtualenvs.create true

            - name: Set up cache
              uses: actions/cache@v2
              id: cache
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pyproject.toml') }}

            - name: Install Package
              run: python -m poetry install

            - name: Quality Assurance
              run: |
                  poetry run flake8 ./lib/ --count --select=E9,F63,F7,F82, --ignore=F821 --show-source --statistics
                  poetry run flake8 ./tests/ --count --select=E9,F63,F7,F82, --ignore=F821 --show-source --statistics
                  poetry run black --diff ./lib/
                  poetry run black --diff ./tests/

            - name: Testing
              run: poetry run pytest ./tests/

    osx-tests:
        needs: ubuntu-tests
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os:
                    - macOS-latest
                python-version:
                    - 3.9
            fail-fast: false

        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 2

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v1
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Update pip
              run: |
                  python -m ensurepip
                  python -m pip install --upgrade pip

            - name: Configure poetry
              run: |
                  python -m pip install poetry
                  python -m poetry config virtualenvs.in-project true
                  python -m poetry config virtualenvs.create true

            - name: Set up cache
              uses: actions/cache@v2
              id: cache
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pyproject.toml') }}

            - name: Install Package
              run: python -m poetry install

            - name: Quality Assurance
              run: |
                  poetry run flake8 ./lib/ --count --select=E9,F63,F7,F82, --ignore=F821 --show-source --statistics
                  poetry run flake8 ./tests/ --count --select=E9,F63,F7,F82, --ignore=F821 --show-source --statistics
                  poetry run black --diff ./lib/
                  poetry run black --diff ./tests/

            - name: Testing
              run: poetry run pytest ./tests/

    windows-tests:
        needs: ubuntu-tests
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os:
                    - windows-latest
                python-version:
                    - 3.9
            fail-fast: false

        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 2

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v1
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Update pip
              run: |
                  python -m ensurepip
                  python -m pip install --upgrade pip

            - name: Configure poetry
              run: |
                  python -m pip install poetry
                  python -m poetry config virtualenvs.in-project true
                  python -m poetry config virtualenvs.create true

            - name: Set up cache
              uses: actions/cache@v2
              id: cache
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pyproject.toml') }}

            - name: Install Package
              run: python -m poetry install

            - name: Quality Assurance
              run: |
                  poetry run flake8 ./lib/ --count --select=E9,F63,F7,F82, --ignore=F821 --show-source --statistics
                  poetry run flake8 ./tests/ --count --select=E9,F63,F7,F82, --ignore=F821 --show-source --statistics
                  poetry run black --diff ./lib/
                  poetry run black --diff ./tests/

            - name: Testing
              run: python -m poetry run pytest ./tests/

    update-documentation:
        needs: generate-badges
        runs-on: ubuntu-latest
        strategy:
            matrix:
                os:
                    - ubuntu-latest
                python-version:
                    - 3.9
            fail-fast: false

        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 2

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v1
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Update pip
              run: |
                  python -m ensurepip
                  python -m pip install --upgrade pip

            - name: Configure poetry
              run: |
                  python -m pip install poetry
                  python -m poetry config virtualenvs.in-project true
                  python -m poetry config virtualenvs.create true

            - name: Set up cache
              uses: actions/cache@v2
              id: cache
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pyproject.toml') }}

            - name: Install Package
              run: python -m poetry install

            - name: Generate Documentation
              run: sh docs/build.sh
